/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mtproj.mt_api.mt_proj;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:mtproj/mt_api.dart';


abstract class MTProj {

  Future ping();

  Future<Map<String, Project>> getProjectListForUser(Context context);

  Future<FileMeta> getFileTreeForProject(Context context, String projectId);

  Future<String> getFileContent(Context context, String fileId);
}

class MTProjClient implements MTProj {

  MTProjClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future ping() async {
    oprot.writeMessageBegin(new TMessage("ping", TMessageType.CALL, nextSeqid()));
    ping_args args = new ping_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    ping_result result = new ping_result();
    result.read(iprot);
    iprot.readMessageEnd();
    return;
  }

  Future<Map<String, Project>> getProjectListForUser(Context context) async {
    oprot.writeMessageBegin(new TMessage("getProjectListForUser", TMessageType.CALL, nextSeqid()));
    getProjectListForUser_args args = new getProjectListForUser_args();
    args.context = context;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getProjectListForUser_result result = new getProjectListForUser_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getProjectListForUser failed: unknown result");
  }

  Future<FileMeta> getFileTreeForProject(Context context, String projectId) async {
    oprot.writeMessageBegin(new TMessage("getFileTreeForProject", TMessageType.CALL, nextSeqid()));
    getFileTreeForProject_args args = new getFileTreeForProject_args();
    args.context = context;
    args.projectId = projectId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getFileTreeForProject_result result = new getFileTreeForProject_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getFileTreeForProject failed: unknown result");
  }

  Future<String> getFileContent(Context context, String fileId) async {
    oprot.writeMessageBegin(new TMessage("getFileContent", TMessageType.CALL, nextSeqid()));
    getFileContent_args args = new getFileContent_args();
    args.context = context;
    args.fileId = fileId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getFileContent_result result = new getFileContent_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getFileContent failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class MTProjProcessor implements TProcessor {
  MTProjProcessor(MTProj iface) {
    iface_ = iface;
    PROCESS_MAP["ping"] = ping;
    PROCESS_MAP["getProjectListForUser"] = getProjectListForUser;
    PROCESS_MAP["getFileTreeForProject"] = getFileTreeForProject;
    PROCESS_MAP["getFileContent"] = getFileContent;
  }

  MTProj iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  ping(int seqid, TProtocol iprot, TProtocol oprot) {
    ping_args args = new ping_args();
    args.read(iprot);
    iprot.readMessageEnd();
    ping_result result = new ping_result();
    iface_.ping();
    oprot.writeMessageBegin(new TMessage("ping", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getProjectListForUser(int seqid, TProtocol iprot, TProtocol oprot) async {
    getProjectListForUser_args args = new getProjectListForUser_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getProjectListForUser_result result = new getProjectListForUser_result();
    result.success = await iface_.getProjectListForUser(args.context);
    oprot.writeMessageBegin(new TMessage("getProjectListForUser", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getFileTreeForProject(int seqid, TProtocol iprot, TProtocol oprot) async {
    getFileTreeForProject_args args = new getFileTreeForProject_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getFileTreeForProject_result result = new getFileTreeForProject_result();
    result.success = await iface_.getFileTreeForProject(args.context, args.projectId);
    oprot.writeMessageBegin(new TMessage("getFileTreeForProject", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getFileContent(int seqid, TProtocol iprot, TProtocol oprot) async {
    getFileContent_args args = new getFileContent_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getFileContent_result result = new getFileContent_result();
    result.success = await iface_.getFileContent(args.context, args.fileId);
    oprot.writeMessageBegin(new TMessage("getFileContent", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class ping_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ping_args");



  ping_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ping_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class ping_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ping_result");



  ping_result() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);


    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ping_result(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getProjectListForUser_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getProjectListForUser_args");
  static final TField _CONTEXT_FIELD_DESC = new TField("context", TType.STRUCT, 1);

  Context _context;
  static const int CONTEXT = 1;


  getProjectListForUser_args() {
  }

  // context
  Context get context => this._context;

  set context(Context context) {
    this._context = context;
  }

  bool isSetContext() => this.context != null;

  unsetContext() {
    this.context = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CONTEXT:
        return this.context;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          this.context = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CONTEXT:
        return isSetContext();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CONTEXT:
          if (field.type == TType.STRUCT) {
            this.context = new Context();
            this.context.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.context != null) {
      oprot.writeFieldBegin(_CONTEXT_FIELD_DESC);
      this.context.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getProjectListForUser_args(");

    ret.write("context:");
    if (this.context == null) {
      ret.write("null");
    } else {
      ret.write(this.context);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getProjectListForUser_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getProjectListForUser_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.MAP, 0);

  Map<String, Project> _success;
  static const int SUCCESS = 0;


  getProjectListForUser_result() {
  }

  // success
  Map<String, Project> get success => this._success;

  set success(Map<String, Project> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.MAP) {
            {
              TMap _map4 = iprot.readMapBegin();
              this.success = new Map<String, Project>();
              for (int _i5 = 0; _i5 < _map4.length; ++_i5) {
                String _key6;
                Project _val7;
                _key6 = iprot.readString();
                _val7 = new Project();
                _val7.read(iprot);
                this.success[_key6] = _val7;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.length));
        for (var elem9 in this.success.keys) {
          oprot.writeString(elem9);
          this.success[elem9].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getProjectListForUser_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getFileTreeForProject_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getFileTreeForProject_args");
  static final TField _CONTEXT_FIELD_DESC = new TField("context", TType.STRUCT, 1);
  static final TField _PROJECT_ID_FIELD_DESC = new TField("projectId", TType.STRING, 2);

  Context _context;
  static const int CONTEXT = 1;
  String _projectId;
  static const int PROJECTID = 2;


  getFileTreeForProject_args() {
  }

  // context
  Context get context => this._context;

  set context(Context context) {
    this._context = context;
  }

  bool isSetContext() => this.context != null;

  unsetContext() {
    this.context = null;
  }

  // projectId
  String get projectId => this._projectId;

  set projectId(String projectId) {
    this._projectId = projectId;
  }

  bool isSetProjectId() => this.projectId != null;

  unsetProjectId() {
    this.projectId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CONTEXT:
        return this.context;
      case PROJECTID:
        return this.projectId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          this.context = value;
        }
        break;

      case PROJECTID:
        if (value == null) {
          unsetProjectId();
        } else {
          this.projectId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CONTEXT:
        return isSetContext();
      case PROJECTID:
        return isSetProjectId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CONTEXT:
          if (field.type == TType.STRUCT) {
            this.context = new Context();
            this.context.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROJECTID:
          if (field.type == TType.STRING) {
            this.projectId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.context != null) {
      oprot.writeFieldBegin(_CONTEXT_FIELD_DESC);
      this.context.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.projectId != null) {
      oprot.writeFieldBegin(_PROJECT_ID_FIELD_DESC);
      oprot.writeString(this.projectId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getFileTreeForProject_args(");

    ret.write("context:");
    if (this.context == null) {
      ret.write("null");
    } else {
      ret.write(this.context);
    }

    ret.write(", ");
    ret.write("projectId:");
    if (this.projectId == null) {
      ret.write("null");
    } else {
      ret.write(this.projectId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getFileTreeForProject_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getFileTreeForProject_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);

  FileMeta _success;
  static const int SUCCESS = 0;


  getFileTreeForProject_result() {
  }

  // success
  FileMeta get success => this._success;

  set success(FileMeta success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new FileMeta();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getFileTreeForProject_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getFileContent_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getFileContent_args");
  static final TField _CONTEXT_FIELD_DESC = new TField("context", TType.STRUCT, 1);
  static final TField _FILE_ID_FIELD_DESC = new TField("fileId", TType.STRING, 2);

  Context _context;
  static const int CONTEXT = 1;
  String _fileId;
  static const int FILEID = 2;


  getFileContent_args() {
  }

  // context
  Context get context => this._context;

  set context(Context context) {
    this._context = context;
  }

  bool isSetContext() => this.context != null;

  unsetContext() {
    this.context = null;
  }

  // fileId
  String get fileId => this._fileId;

  set fileId(String fileId) {
    this._fileId = fileId;
  }

  bool isSetFileId() => this.fileId != null;

  unsetFileId() {
    this.fileId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CONTEXT:
        return this.context;
      case FILEID:
        return this.fileId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CONTEXT:
        if (value == null) {
          unsetContext();
        } else {
          this.context = value;
        }
        break;

      case FILEID:
        if (value == null) {
          unsetFileId();
        } else {
          this.fileId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CONTEXT:
        return isSetContext();
      case FILEID:
        return isSetFileId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CONTEXT:
          if (field.type == TType.STRUCT) {
            this.context = new Context();
            this.context.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FILEID:
          if (field.type == TType.STRING) {
            this.fileId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.context != null) {
      oprot.writeFieldBegin(_CONTEXT_FIELD_DESC);
      this.context.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.fileId != null) {
      oprot.writeFieldBegin(_FILE_ID_FIELD_DESC);
      oprot.writeString(this.fileId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getFileContent_args(");

    ret.write("context:");
    if (this.context == null) {
      ret.write("null");
    } else {
      ret.write(this.context);
    }

    ret.write(", ");
    ret.write("fileId:");
    if (this.fileId == null) {
      ret.write("null");
    } else {
      ret.write(this.fileId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getFileContent_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getFileContent_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);

  String _success;
  static const int SUCCESS = 0;


  getFileContent_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getFileContent_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

