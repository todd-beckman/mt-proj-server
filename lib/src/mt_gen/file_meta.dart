/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mt_api.src.mt_gen.file_meta;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:mt_api/src/mt_gen.dart';

class FileMeta implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("FileMeta");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _PROJECT_ID_FIELD_DESC = new TField("projectId", TType.STRING, 2);
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 3);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 4);
  static final TField _CHILDREN_FIELD_DESC = new TField("children", TType.LIST, 5);

  String _id;
  static const int ID = 1;
  String _projectId;
  static const int PROJECTID = 2;
  int _type;
  static const int TYPE = 3;
  String _name;
  static const int NAME = 4;
  List<FileMeta> _children;
  static const int CHILDREN = 5;

  bool __isset_type = false;

  FileMeta() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // projectId
  String get projectId => this._projectId;

  set projectId(String projectId) {
    this._projectId = projectId;
  }

  bool isSetProjectId() => this.projectId != null;

  unsetProjectId() {
    this.projectId = null;
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // children
  List<FileMeta> get children => this._children;

  set children(List<FileMeta> children) {
    this._children = children;
  }

  bool isSetChildren() => this.children != null;

  unsetChildren() {
    this.children = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case PROJECTID:
        return this.projectId;
      case TYPE:
        return this.type;
      case NAME:
        return this.name;
      case CHILDREN:
        return this.children;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case PROJECTID:
        if (value == null) {
          unsetProjectId();
        } else {
          this.projectId = value;
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case CHILDREN:
        if (value == null) {
          unsetChildren();
        } else {
          this.children = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case PROJECTID:
        return isSetProjectId();
      case TYPE:
        return isSetType();
      case NAME:
        return isSetName();
      case CHILDREN:
        return isSetChildren();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROJECTID:
          if (field.type == TType.STRING) {
            this.projectId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHILDREN:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.children = new List<FileMeta>();
              for (int _i1 = 0; _i1 < _list0.length; ++_i1) {
                FileMeta _elem2;
                _elem2 = new FileMeta();
                _elem2.read(iprot);
                this.children.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.projectId != null) {
      oprot.writeFieldBegin(_PROJECT_ID_FIELD_DESC);
      oprot.writeString(this.projectId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.children != null) {
      oprot.writeFieldBegin(_CHILDREN_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.children.length));
        for (var elem3 in this.children) {
          elem3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("FileMeta(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("projectId:");
    if (this.projectId == null) {
      ret.write("null");
    } else {
      ret.write(this.projectId);
    }

    ret.write(", ");
    ret.write("type:");
    String type_name = FileType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("children:");
    if (this.children == null) {
      ret.write("null");
    } else {
      ret.write(this.children);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !FileType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
  }

}

