/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library mt_api.src.mt_gen.context;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:mt_api/src/mt_gen.dart';

class Context implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Context");
  static final TField _CORRELATION_ID_FIELD_DESC = new TField("correlationId", TType.STRING, 1);
  static final TField _USER_ID_FIELD_DESC = new TField("userId", TType.STRING, 2);

  String _correlationId;
  static const int CORRELATIONID = 1;
  String _userId;
  static const int USERID = 2;


  Context() {
  }

  // correlationId
  String get correlationId => this._correlationId;

  set correlationId(String correlationId) {
    this._correlationId = correlationId;
  }

  bool isSetCorrelationId() => this.correlationId != null;

  unsetCorrelationId() {
    this.correlationId = null;
  }

  // userId
  String get userId => this._userId;

  set userId(String userId) {
    this._userId = userId;
  }

  bool isSetUserId() => this.userId != null;

  unsetUserId() {
    this.userId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CORRELATIONID:
        return this.correlationId;
      case USERID:
        return this.userId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CORRELATIONID:
        if (value == null) {
          unsetCorrelationId();
        } else {
          this.correlationId = value;
        }
        break;

      case USERID:
        if (value == null) {
          unsetUserId();
        } else {
          this.userId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CORRELATIONID:
        return isSetCorrelationId();
      case USERID:
        return isSetUserId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CORRELATIONID:
          if (field.type == TType.STRING) {
            this.correlationId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERID:
          if (field.type == TType.STRING) {
            this.userId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.correlationId != null) {
      oprot.writeFieldBegin(_CORRELATION_ID_FIELD_DESC);
      oprot.writeString(this.correlationId);
      oprot.writeFieldEnd();
    }
    if (this.userId != null) {
      oprot.writeFieldBegin(_USER_ID_FIELD_DESC);
      oprot.writeString(this.userId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Context(");

    ret.write("correlationId:");
    if (this.correlationId == null) {
      ret.write("null");
    } else {
      ret.write(this.correlationId);
    }

    ret.write(", ");
    ret.write("userId:");
    if (this.userId == null) {
      ret.write("null");
    } else {
      ret.write(this.userId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

